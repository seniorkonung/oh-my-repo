# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json

matches:
  - trigger: ':prompt'
    label: 'Prompt: переделка промпта'
    replace: |
      # Генерация улучшенного промпта на основаниия старого

      ## Задание
      Сгенерируй новые промпты на основании старых, которые будут указаны в последующих сообщениях. Убери
      лишнее, добавь недостающее. Новый промпт должен быть понятным для нейросетей.

      ## Требования

      1. Новый промпт должен быть в формате markdown
      2. Нейросети должно быть ясно, что входные данные будут указаны в последующих сообщениях, многократно.
      3. Новый промпт должен сохранять язык оригинала

  - trigger: ':prompt'
    label: 'Prompt: генерация ключей i18n'
    replace: |
      # Генерация ключей i18n

      ## Задача
      На основе описания, которое будет дано в следующих сообщениях (многократно), придумай короткий и понятный 
      ключ для i18n (интернационализации).

      ## Требования
      1. Формат ключа — `snake_case`.
      2. Ключ должен быть кратким и точно отражать смысл описания.
      3. Использовать только английские слова.
      4. Примеры корректных ключей:  
        - `invalid_password`  
        - `too_many_requests`  
        - `email_already_taken`

  - trigger: ':prompt'
    label: 'Prompt: генерация changeset описания'
    replace: |
      # Генерация описания changeset

      ## Задача
      На основе описания, которое будет предоставлено в следующих сообщениях (многократно), сгенерируй 
      краткое и точное описание части изменения (changeset) для системы управления версиями или пакетами.

      ## Требования
      1. **Краткость и точность** — описание должно быть лаконичным и чётко передавать суть изменения.  
      2. **Техническая терминология** — используй принятые в разработке термины и конвенции.  
      3. **Формат** — описание должно подходить для changelog или commit message.  
      4. **Время** — используй прошедшее время (например: "Added", "Fixed", "Updated").  
      5. **Стиль** — начинай с заглавной буквы, без точки в конце (если это одно предложение).  

      ## Примеры
      - "Добавлена поддержка TypeScript" → `Added TypeScript support`  
      - "Исправлена ошибка с валидацией форм" → `Fixed form validation error`  
      - "Обновлены зависимости до последних версий" → `Updated dependencies to latest versions`

  - trigger: ':prompt'
    label: 'Prompt: генерация названия feature branch в git'
    replace: |
      # Генерация названия feature branch в git

      ## Задача
      На основе описания, которое будет предоставлено в следующих сообщениях (многократно), 
      сгенерируй корректное название feature-ветки в git.

      ## Требования
      1. Начинай с подходящего префикса согласно Conventional Commits:
        - `feat/` — для новых функций  
        - `fix/` — для исправления багов  
        - `refactor/` — для рефакторинга кода  
        - `docs/` — для документации  
        - `test/` — для тестов  
        - `chore/` — для вспомогательных задач  
        - `style/` — для стилистических изменений  
        - `perf/` — для улучшения производительности  

      2. После префикса используй `kebab-case` (слова через дефис, все строчные).  
      3. Название должно быть кратким и описательным.  
      4. Используй глаголы в повелительном наклонении или существительные.  
      5. Избегай артиклей (`a`, `an`, `the`).  
      6. Используй технические термины на английском языке.  
      7. Максимальная длина — **60 символов**.  

      ## Примеры
      - "Добавить авторизацию пользователя" → `feat/add-user-authentication`  
      - "Исправить баг с загрузкой файлов" → `fix/file-upload-error`  
      - "Обновить дизайн главной страницы" → `feat/update-homepage-design`  
      - "Рефакторинг API для заказов" → `refactor/orders-api`  
      - "Добавить тесты для корзины" → `test/shopping-cart-tests`

  - trigger: ':prompt'
    label: 'Prompt: генерация названия переменной в TS'
    replace: |
      # Именование переменных TypeScript

      ## Задача
      На основе описания, которое будет предоставлено в следующих сообщениях (многократно), сгенерируй 
      корректное английское название переменной по стандартам TypeScript.

      ## Правила именования

      ### Основные стандарты
      - **camelCase** — для переменных и функций (`userName`, `calculateTotal`)  
      - **PascalCase** — для типов, интерфейсов и классов (`User`, `ApiResponse`)  
      - **SCREAMING_SNAKE_CASE** — для констант (`MAX_RETRIES`, `API_URL`)  

      ### Паттерны по типу
      - **Булевы**: начинаются с `is*`, `has*`, `can*`, `should*` (`isLoading`, `hasPermission`)  
      - **Массивы**: во множественном числе (`users`, `itemList`)  
      - **Функции**: глагол + объект (`getUserData`, `validateForm`)  
      - **Обработчики**: начинаются с `handle*` или `on*` (`handleClick`, `onSubmit`)  
      - **Конфиги**: заканчиваются на `*Config` или `*Settings` (`apiConfig`)  

      ## Примеры
      | Описание | Результат |
      |----------|-----------|
      | Список активных пользователей | `activeUsers` |
      | Проверка авторизации пользователя | `isUserAuthorized` |
      | Функция отправки email | `sendEmail` |
      | Максимальная длина пароля | `MAX_PASSWORD_LENGTH` |
      | Обработчик кнопки сохранения | `handleSaveClick` |

      ## Инструкция
      1. Проанализируй описание и определи тип сущности (переменная, функция, константа, тип).  
      2. Применяй соответствующий стандарт именования.  
      3. Верни **несколько вариантов названия** с кратким обоснованием преимуществ каждого.

  - trigger: ':prompt'
    label: 'Prompt: генерация названий свойств react'
    replace: |
      # Генерация названий свойств интерфейса пропсов React-компонента

      ## Задача
      Тебе будет дан интерфейс пропсов React-компонента на TypeScript. У каждого свойства временное имя в виде нижнего подчёркивания `_`, а в комментарии указано его описание и назначение.  

      Твоя задача:  
      1. На основании комментариев придумать корректные и осмысленные названия свойств.  
      2. Вернуть тот же интерфейс, но:  
        - заменить все `_` на новые названия  
        - удалить комментарии

  - trigger: ':prompt'
    label: 'Prompt: генерация названий в ts'
    replace: |
      # Генерация корректных названий в TypeScript

      ## Задача
      Тебе будет дан участок TypeScript-кода, в котором названия переменных, классов, интерфейсов, 
      свойств или функций могут быть заменены на `_` или иметь неудачные имена. Рядом с такими 
      сущностями будут комментарии с пояснением их назначения.  

      ## Инструкция
      1. Сгенерируй новые названия для сущностей на основании комментариев.  
      2. Новые названия должны:
        - точно отражать смысл комментария,  
        - соответствовать стандартам TypeScript (camelCase для переменных и функций, PascalCase для классов и 
          интерфейсов, SCREAMING_SNAKE_CASE для констант и т.д.).  
      3. Верни исходный участок кода с заменёнными названиями.  
      4. Удали все комментарии.
