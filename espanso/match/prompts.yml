# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json

matches:
  - trigger: ':prompt'
    label: 'Prompt: переделка промпта'
    replace: |
      # Генерация улучшенного промпта на основаниия старого

      ## Задание
      Сгенерируй новый промпт на основании старого, который указан во входных данных. Убери
      лишнее, добавь недостающее. Новый промпт должен быть понятным для нейросетей.

      ## Требования

      1. Новый промпт должен быть в формате markdown
      2. В новом промпте в самом нижу должен присутствовать раздел "Вводные данные" на основании которых должен работать промпт
      3. В вводных данных в качестве заглушки должен быть текст: \{\{text.plain\}\}

      ## Вводные данные
      {{text.plain}}
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'
          fields:
            plain:
              multiline: true

  - trigger: ':prompt'
    label: 'Prompt: генерация ключей i18n'
    replace: |
      # Генерация ключей i18n

      ## Задача
      Ты должен придумать короткие и понятные ключи для i18n (интернационализации). Я буду описывать для чего нужен ключ, а твоя 
      задача — предложить подходящее название.

      ## Правила
      1. Формат ключа — `snake_case`.
      2. Название должно быть кратким и отражать смысл.
      3. Использовать только английские слова.
      4. Примеры корректных ключей:  
        - `invalid_password`  
        - `too_many_requests`  
        - `email_already_taken`  

      ## Вводные данные
      {{text.plain}}
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'
          fields:
            plain:
              multiline: true

  - trigger: ':prompt'
    label: 'Prompt: генерация changeset описания'
    replace: |
      # Генерация changeset описания

      ## Задание
      Сгенерируй описание части изменения (changeset) для системы управления версиями или пакетами на основании
      предоставленного описания в качестве вводных данных.

      ## Требования

      1. **Краткость и точность**: Описание должно быть лаконичным и четко передавать суть изменения
      2. **Техническая терминология**: Используй принятые в разработке термины и конвенции
      3. **Формат**: Описание должно быть в формате, подходящем для changelog или commit message
      4. **Время**: Используй прошедшее время (например, "Added", "Fixed", "Updated")
      5. **Стиль**: Начинай с заглавной буквы, без точки в конце (если это одно предложение)

      ## Примеры

      - "Добавлена поддержка TypeScript" → "Added TypeScript support"
      - "Исправлена ошибка с валидацией форм" → "Fixed form validation error"
      - "Обновлены зависимости до последних версий" → "Updated dependencies to latest versions"

      ## Вводные данные
      {{text.plain}}
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'
          fields:
            plain:
              multiline: true

  - trigger: ':prompt'
    label: 'Prompt: генерация названия feature branch в git'
    replace: |
      # Генерация названия feature branch в git

      ## Задание
      Сгенерируй название feature ветки git на основании предоставленного описания в качестве вводных данных.

      ## Требования

      1. Начинай с соответствующего prefix'а согласно Conventional Commits:
        - feat/ - для новых функций
        - fix/ - для исправления багов
        - refactor/ - для рефакторинга кода
        - docs/ - для документации
        - test/ - для тестов
        - chore/ - для вспомогательных задач
        - style/ - для стилистических изменений
        - perf/ - для улучшения производительности

      2. После prefix'а используй kebab-case (слова через дефис, все строчные буквы)
      3. Название должно быть кратким и описательным
      4. Используй глаголы в повелительном наклонении или существительные
      5. Избегай артиклей (a, an, the)
      6. Используй технические термины на английском языке
      7. Максимальная длина - 60 символов

      ## Примеры
      - "Добавить авторизацию пользователя" → "feat/add-user-authentication"
      - "Исправить баг с загрузкой файлов" → "fix/file-upload-error"
      - "Обновить дизайн главной страницы" → "feat/update-homepage-design"
      - "Рефакторинг API для заказов" → "refactor/orders-api"
      - "Добавить тесты для корзины" → "test/shopping-cart-tests"

      ## Вводные данные
      {{text.plain}}
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'

  - trigger: ':prompt'
    label: 'Prompt: генерация названия переменной в TS'
    replace: |
      # Именование переменных TypeScript

      ## Задача
      Преобразуй описание в корректное английское название переменной по стандартам TypeScript.

      ## Правила именования

      ### Основные стандарты
      - **camelCase**: переменные, функции (`userName`, `calculateTotal`)
      - **PascalCase**: типы, интерфейсы, классы (`User`, `ApiResponse`) 
      - **SCREAMING_SNAKE_CASE**: константы (`MAX_RETRIES`, `API_URL`)

      ### Паттерны по типу
      - **Булевы**: `is*`, `has*`, `can*`, `should*` (`isLoading`, `hasPermission`)
      - **Массивы**: множественное число (`users`, `itemList`)
      - **Функции**: глагол + объект (`getUserData`, `validateForm`)
      - **Обработчики**: `handle*` или `on*` (`handleClick`, `onSubmit`)
      - **Конфиги**: `*Config` или `*Settings` (`apiConfig`)

      ## Примеры

      | Описание | Результат |
      |----------|-----------|
      | Список активных пользователей | `activeUsers` |
      | Проверка авторизации пользователя | `isUserAuthorized` |
      | Функция отправки email | `sendEmail` |
      | Максимальная длина пароля | `MAX_PASSWORD_LENGTH` |
      | Обработчик кнопки сохранения | `handleSaveClick` |

      ## Входные данные
      ```
      {{input.text}}
      ```

      ## Инструкция
      Проанализируй описание и верни несколько вариантов названия с кратким обоснованием преимуществ. Определи тип 
      сущности (переменная/функция/константа/тип) и примени соответствующий стандарт именования.
    vars:
      - name: input
        type: form
        params:
          layout: '[[text]]'
          fields:
            text:
              multiline: true

  - trigger: ':prompt'
    label: 'Prompt: генерация названий свойств react'
    replace: |
      # Генерации названий свойств интерфейса пропсов React-компонента

      Тебе даётся интерфейс пропсов React-компонента на TypeScript. Каждое свойство имеет временное имя в виде нижнего 
      подчёркивания `_`, а в комментарии указано описание и назначение этого свойства.  

      ## Задача
      1. На основании комментариев придумать осмысленные и корректные названия свойств.  
      2. Вернуть тот же интерфейс, но:
        - с заменёнными названиями вместо `_`
        - без комментариев  

      ## Вводные данные
      ```
      {{text.plain}}
      ```
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'
          fields:
            plain:
              multiline: true

  - trigger: ':prompt'
    label: 'Prompt: генерация названий в ts'
    replace: |
      # Генерация корректных названий в TypeScript

      Тебе даётся участок TypeScript-кода. В этом коде названия переменных, классов, интерфейсов, свойств или функций могут быть 
      заменены на `_` или иметь неудачные имена. Рядом с такими сущностями присутствуют комментарии, поясняющие их назначение.  

      ## Задача

      1. Сгенерировать новые названия для сущностей на основании комментариев.  
      2. Новые названия должны:
        - соответствовать смыслу комментария,  
        - следовать современным стандартам именования в TypeScript (camelCase для переменных и функций, PascalCase для классов и интерфейсов и т.д.).  
      3. Вернуть исходный участок кода с заменёнными названиями.  
      4. Удалить все комментарии.  

      ## Вводные данные
      ```
      {{text.plain}}
      ```
    vars:
      - name: text
        type: form
        params:
          layout: '[[plain]]'
          fields:
            plain:
              multiline: true
